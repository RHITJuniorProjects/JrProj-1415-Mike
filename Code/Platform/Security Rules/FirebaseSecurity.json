{  
   "rules":{  
     
      ".read":true,
      ".write": "auth.uid == 'nodeServer'",
      
      "commits":{
        ".write":"true",
        "$projectID":{
           ".validate":"root.child('projects').hasChild($projectID)",
        "$commitId":{
          "added_lines_of_code":{
            ".validate":"newData.isNumber()"
          },
          "hours":{
            ".validate":"newData.isNumber()"
          },
          "message":{
            ".validate":"newData.isString()"
          },
          "milestone":{
           ".validate":"newData.isString()&&root.child('projects/'+$projectID+'/milestones').hasChild(newData.val())" 
          },
          "project":{
           ".validate":"newData.isString()&&root.child('projects').hasChild(newData.val())" 
          },
          "removed_lines_of_code":{
           ".validate":"newData.isNumber()" 
          },
          "status":{
           ".validate":"newData.isString()" 
          },
          "task":{
           ".validate":"newData.isString()" //Not sure how to check if it is a task in the projects table
          },
          "timestamp":{
           ".validate":"newData.isNumber()"
          },
          "user":{
           ".validate":"newData.isString() && root.child('users').hasChild(newData.val())" 
          }
        }
        }
      },
      "projects":{  
         "$projectID":{
           
           ".write":"!data.exists() || !newData.exists() ||('Lead' == root.child('projects/'+$projectID+'/members/'+auth.uid).val())",
           //Consider refactoring to only second part of or statement?
            ".validate":"newData.hasChildren(['name','due_date','description','members']) || data.hasChildren(['name','due_date','description','members'])",
            "added_lines_of_code":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "due_date":{  
               ".validate":"newData.isString() && (newData.val().matches(/No Due Date/) || newData.val().matches(/^(19|20)[0-9][0-9][-\\/. ](0[1-9]|1[012])[-\\/. ](0[1-9]|[12][0-9]|3[01])$/))"
            },
            "backlog":{  
               "$taskID":{  
                  ".validate":"newData.hasChildren(['category','description','name'])",
                  "description":{  
                     ".validate":"newData.isString()"
                  },
                  "name":{  
                     ".validate":"newData.isString()"
                  }
                  //Validate that category is one of the ones we listed?
               }
            },
            "members":{  
               ".validate":"newData.hasChildren()",
               "$loginId":{  
                  ".validate":"root.child('users').hasChild($loginId) && newData.isString() && newData.val().matches(/Lead|Developer|Client|QA|Other/)"
               }
            },
            "milestone_percent":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "name":{  
               ".validate":"newData.isString()"
            },
            "milestones_completed":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "removed_lines_of_code":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "task_percent":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "tasks_completed":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "total_estimated_hours":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "total_hours":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "total_lines_of_code":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "total_milestones":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "total_tasks":{  
               ".validate":"newData.isNumber() && newData.val() >= 0"
            },
            "milestones":{  
               ".validate":"true",
               "$milestoneID":{  
                  ".validate":"newData.hasChildren(['name','due_date','description']) || data.hasChildren(['name','due_date','description']) || !newData.hasChildren() || !data.hasChildren()",
                  "added_lines_of_code":{  
                     ".validate":"newData.isNumber() && newData.val() >= 0"
                  },
                  "estimated_hours":{  
                     ".validate":"newData.isNumber() && newData.val() >= 0"
                  },
                  "due_date":{  
                     ".validate":"newData.isString() && (newData.val().matches(/No Due Date/) || newData.val().matches(/^(19|20)[0-9][0-9][-\\/. ](0[1-9]|1[012])[-\\/. ](0[1-9]|[12][0-9]|3[01])$/))"
                  },
                  "task_percent":{  
                     ".validate":"newData.isNumber() && newData.val() >= 0"
                  },
                  "tasks_completed":{  
                     ".validate":"newData.isNumber() && newData.val() >= 0"
                  },
                  "total_estimated_hours":{  
                     ".validate":"newData.isNumber() && newData.val() >= 0"
                  },
                  "total_hours":{  
                     ".validate":"newData.isNumber() && newData.val() >= 0"
                  },
                  "total_lines_of_code":{  
                     ".validate":"newData.isNumber() && newData.val() >= 0"
                  },
                  "total_tasks":{  
                     ".validate":"newData.isNumber() && newData.val() >= 0"
                  },
                  "tasks":{  
                     ".validate":"true",
                     "$taskID":{  
                        ".write":      "(root.child('projects/'+$projectID+'/milestones/' + $milestoneID + '/tasks/').hasChild($taskID) &&  root.child('projects/'+$projectID+'/members/').hasChild(auth.uid))",
                        ".validate":"newData.hasChildren(['name','due_date','description','original_hour_estimate','category']) || data.hasChildren(['name','due_date','description','original_hour_estimate','category']) || !newData.hasChildren() || !data.hasChildren()",
                        "assignedTo":{  
                           ".validate":"root.child('users').hasChild(newData.val())",
                           ".write":"root.child('projects/'+$projectID+'/milestones/' + $milestoneID + '/tasks/' + $taskID + '/assignedTo').val() == auth.uid"
                        },
                        "due_date":{  
                           ".validate":"newData.isString() && (newData.val().matches(/No Due Date/) || newData.val().matches(/^(19|20)[0-9][0-9][-\\/. ](0[1-9]|1[012])[-\\/. ](0[1-9]|[12][0-9]|3[01])$/))"
                        },
                        "updated_hour_estimate":{  
                           ".validate":"newData.isNumber() && newData.val() >= 0",
                          ".write":"root.child('projects/'+$projectID+'/milestones/' + $milestoneID + '/tasks/' + $taskID + '/assignedTo').val() == auth.uid"

                        },
                        
                        "bounties":{
                         "$bountyID" :{
                         }
                        },
                        "total_hours":{  
                           ".validate":"newData.isNumber() && newData.val() >= 0"
                        },
                        "total_lines_of_code":{  
                           ".validate":"newData.isNumber() && newData.val() >= 0"
                        },
                        "category":{  
                         ".validate":"newData.isString() && (root.child('default_categories').hasChild(newData.val()) || root.child('projects/' + $projectID + '/custom_categories').hasChild(newData.val()))"
                        },
                        "status":{  
                           ".validate":"newData.isString() && (newData.val().matches(/New|Implementation|Testing|Verify|Regression|Closed/))",
                            ".write":"root.child('projects/'+$projectID+'/milestones/' + $milestoneID + '/tasks/' + $taskID + '/assignedTo').val() == auth.uid" 

                        }
                        
                     }
                  }
               }
            }
         }
      },
      "users":{  
         "$user":{  
               ".write":"!data.exists() || !newData.exists()",
            ".validate":"newData.hasChildren(['name','email'])",
            "name":{
             ".write":"auth.uid == $user"
            },
            "email":{
             ".write":"auth.uid == $user"              
            },
            "total_points":{
              ".validate":"newData.isNumber()"
            },
            "added_lines_of_code":{
              ".validate":"newData.isNumber()"
            },
           "removed_lines_of_code":{
              ".validate":"newData.isNumber()"
            },
            "total_lines_of_code":{
              ".validate":"newData.isNumber()"
            },
           "total_hours":{
              ".validate":"newData.isNumber()"
            },
            "projects":{  
               "$project":{  
                  ".validate":"root.child('projects').hasChild($project)"
               }
            }
         }
      }
   }
}
